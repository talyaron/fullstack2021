import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchText } from '../text/textAPI';

export interface TextState {
  value: string;
  status: 'idle' | 'loading' | 'failed';
}

//the way the state starts
const initialState: TextState = {
  value: "",
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'text/fetchText',
  async (theText: string) => {
    const response = await fetchText();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const textSlice = createSlice({
  name: 'text',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toCapitalCase: (state,action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      
      state.value +=  action.payload
      
      console.log(state.value)
       
     
    },
    hallelujah: (state) => {
      state.value = 'Hallelujah';
    },
   
 
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

 
export const { toCapitalCase,hallelujah} = textSlice.actions;


export const selectMyText = (state: RootState) => state.text.value;



export default textSlice.reducer;
//exports textSlice as text reducer which is shown in the store and i think connects between them
