import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {
    getTextListAsync,
    addTextLineAsync,
    // , deleteTextLineAsync, updateTextLineAsync
} from './textAPI';
import axios from 'axios';
import {LegacyRef, useRef} from 'react';

export enum statusEnum {
    IDLE = 'idle',
    LOADING = 'loading',
    FAILED = 'failed',
}
export interface TextLine {
    id: string;
    text: string;
}
export interface TextState {
    textList: Array<TextLine>;
    status: statusEnum;
}

const initialState: TextState = {
    textList: [],
    status: statusEnum.IDLE,
};
export const textSlice = createSlice({
    name: 'text',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        add: (state: TextState, action: PayloadAction<TextLine>) => {
            try {
                state.textList.push(action.payload);
                // const textLine = action.payload;
                // (async (textLine: TextLine) => {
                //     await axios.post('/api/texts/addTextLine', {textLine});
                // })(textLine);
                // getTextListAsync();
            } catch (error) {
                console.log(error);
            }
        },
        deleteLine: (state: TextState, action: PayloadAction<TextLine>) => {
            try {
                const {id} = action.payload;
                const index = state.textList.findIndex((textLine: TextLine) => {
                    return textLine.id === id;
                });
                state.textList.splice(index, 1);
                const textLineToDelete = action.payload;
                (async (textLineToDelete: TextLine) => {
                    await axios.post('/api/texts/deleteTextLine', {textLineToDelete});
                })(textLineToDelete);
                // deleteTextLineAsync(action.payload)
            } catch (error) {
                console.log(error);
            }
        },

        updateLine: (state: TextState, action: PayloadAction<TextLine>) => {
            try {
                const {id} = action.payload;
                const index = state.textList.findIndex((textLine: TextLine) => {
                    return textLine.id === id;
                });
                state.textList[index] = action.payload;
                const textLineToUpdate = action.payload;
                (async (textLineToUpdate: TextLine) => {
                    await axios.post('/api/texts/updateTextLine', {textLineToUpdate});
                })(textLineToUpdate);
            } catch (error) {
                console.log(error);
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getTextListAsync.pending, (state) => {
                state.status = statusEnum.LOADING;
            })
            .addCase(getTextListAsync.fulfilled, (state, action) => {
                state.status = statusEnum.IDLE;
                if (!action.payload) throw new Error('no textList');
                state.textList = action.payload;
            })
            .addCase(getTextListAsync.rejected, (state) => {
                state.status = statusEnum.FAILED;
                console.log('failed');
            })
            .addCase(addTextLineAsync.pending, (state) => {
                state.status = statusEnum.LOADING;
                console.log('loading');
            })
            .addCase(addTextLineAsync.fulfilled, (state) => {
                state.status = statusEnum.IDLE;
                // how do you fetch on adding?
                // getTextListAsync()
            })
            .addCase(addTextLineAsync.rejected, (state) => {
                state.status = statusEnum.FAILED;
                console.log('failed');
            });
        // .addCase(deleteTextLineAsync.pending, (state) => {
        //   state.status = statusEnum.LOADING;
        //   console.log('loading');

        // })
        // .addCase(deleteTextLineAsync.fulfilled, (state, action) => {
        //   state.status = statusEnum.IDLE;
        //   console.log(action, 'idle');

        // })
        // .addCase(deleteTextLineAsync.rejected, (state) => {
        //   state.status = statusEnum.FAILED;
        //   console.log('failed');

        // })
        // .addCase(updateTextLineAsync.pending, (state) => {
        //   state.status = statusEnum.LOADING;
        //   console.log('loading');

        // })
        // .addCase(updateTextLineAsync.fulfilled, (state, action) => {
        //   state.status = statusEnum.IDLE;
        //   console.log(action, 'idle');

        // })
        // .addCase(updateTextLineAsync.rejected, (state) => {
        //   state.status = statusEnum.FAILED;
        //   console.log('failed');

        // });
    },
});

export const {add, deleteLine, updateLine} = textSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTextList = (state: RootState) => state.text.textList;
export const selectTextStatus = (state: RootState) => state.text.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectText(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default textSlice.reducer;
