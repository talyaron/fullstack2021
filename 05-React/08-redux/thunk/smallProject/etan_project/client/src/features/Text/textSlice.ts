import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchText } from './textAPI';

export enum statusEnum {
  IDLE='idle',
  LOADING='loading',
  FAILED='failed'
}
export interface textLine {
id:number;
text:string
}
export interface TextState {
  value: Array<textLine>;
  status:statusEnum;
}

const initialState: TextState = {
  value: [],
  status: statusEnum.IDLE,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const textSlice = createSlice({
  name: 'text',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state:TextState, action:PayloadAction<textLine>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value.unshift(action.payload);
    },
    delete: (state:TextState, action: PayloadAction<textLine>) => {
      const {id} = action.payload
      const index = state.value.findIndex((textLine:textLine)=>{textLine.id === id})
      state.value.splice(index, 1)
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    update: (state:TextState, action: PayloadAction<textLine>) => {
      const {id} = action.payload
      const index = state.value.findIndex((textLine:textLine)=>{textLine.id === id})
      state.value[index] = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const {add } = textSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectText = (state: RootState) => state.Text.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectText(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default textSlice.reducer;
